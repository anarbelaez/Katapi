<script>
var canvasDiv = document.getElementById("canvasTree");
// Setup: controla el tamano del canvas y el background (sun-moon, gradient, mountains)
function setup() {
  // var canvas = createCanvas(600, 500);
  var width = canvasDiv.offsetWidth;
  var height = canvasDiv.offsetHeight;
  let render = createCanvas(width, 500);
  render.parent("canvasTree");
  // render.style('margin-left', '-15px');
  noLoop();
  gradient([15, 188, 249],[5, 196, 107]);
  drawSun();
  let xOff = random(0, 1000);
  mountains(56, 250, 0.015, [55,66,66],xOff);
  mountains(135, 250, 0.015, 0,xOff);
  // mountains(50, 110, 0.006,50,xOff);
  // mountains(15, 65, 0.1,68,xOff);
  mountains(15, 45, 0.6,[196, 229, 56],xOff);
}


// Draw: Controla el arbol
function draw(){
  stroke(25,20,23);
  strokeWeight(13);
  translate(width/2,height-2);
  branch(0);
}

function gradient(begin, end) {
  for (let y = 0; y < height; y += 0.5) {
    n = map(y, 0, height, 0, 1);
    let newC = lerpColor(color(begin), color(end), n);
    stroke(newC);
    line(0, y, width, y + 1);
  }
}

function drawSun() {
  noStroke();
  // Los dos primeros param. de la elipse se refieren a x, y donde inicia la forma
  fill(223, 249, 251, 50);
  ellipse(200, 130, 170, 170);
  fill(223, 249, 251, 150);
  ellipse(200, 130, 130, 130);
  fill(223, 249, 251, 200);
  ellipse(200, 130, 110, 110);
  fill(223, 249, 251);
  ellipse(200, 130, 70, 70);
}

function mountains(hMin, hMax, inc, col, xOff) {
  let y;
  noStroke();
  squareColor = color(col);
  squareColor.setAlpha(65);
  fill(squareColor);

  beginShape();
  for (let x = 0; x < width; x++) {
    y = map(noise(xOff), 0, 1, height - hMin, height - hMax);
    vertex(x, y);
    xOff += inc;
  }
  vertex(width, height);
  vertex(0, height);
  endShape();
}


function branch(depth){
  if (depth < 11) {
    line(0,0,0,-height/15); // Linea madre, original 10
    {
      translate(0,-height/15); // Extiende el arbol, original 10
      rotate(random(-0.2,0.2));  // Ramas mas deformes a valores mas altos, original 0.05

      if (random(1) < 0.6){ // Tamaño y dispersion de las hojas, original 0.6. Valores pequeños, arbol mas grande. 1 arbol en cono
        rotate(0.3); // rotacion de la parte derecha
        scale(0.8);

        push(); // salvar el estado actual
        branch(depth + 1); // inicia una nueva branch
        pop(); // reiniciar el estado de la branch

        rotate(-0.6); // rotar a la izquieda
        push(); // salvar
        branch(depth + 1); // crear una segunda branch
        pop(); // reiniciar
     }
      else { // si no se crea una branch, entonces vuelva a llamarse (recursion)
        branch(depth);
      }
    }
  } else
  {
    // Una vez terminado el arbol se crean las flores
    noStroke();

    // Colores random
    // fill(random(188,255), 226, 158, 250)
    // fill(28, 103, 88) // Verde bonito
    fill(0, 141, 158) // Verde bonito 2
    // fill(238,54,126) // Pink
    // fill(255,141,199) // Light pink
    // let colores = [[255,116,177], [255,161,207]]
    // fill(color(random(colores))) // Para flores de dos colores
    // fill(205,83,107) // Peach

    // Color de las hojas
    // let col = color(66,95,87);
    // col.setAlpha(128); // Opacidad
    // fill(col);

    // Glow
    // drawingContext.shadowBlur = 5;
    // drawingContext.shadowColor = color(200,255,138);

    // Forma de las hojas
    ellipse(56, 46, 55, 55)

    // bezier(131,225,109,48,291,202,131,225);
    // bezier(143,279,0,0,400,181,143,279);

    for (let i = 0; i < 10; i ++) {
      noStroke()
      // Glow
      drawingContext.shadowBlur = 5;
      drawingContext.shadowColor = color(255,65);
      fill(255,141,199)
      ellipse(0, 30, 20, 80);
      rotate(PI/5); // Angulo de rotacion, si el denominador cambia, cambia la forma de la flor
    }
  }
}
</script>
